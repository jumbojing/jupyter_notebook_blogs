{
  
    
        "post0": {
            "title": "Log",
            "content": "&lt;0x04&gt; 字节码混淆 . 字节码混淆可以非常容易的欺骗通常的反汇编器和反编译器，同时不影响代码的正常执行。下面这个例子展示了如何欺骗Uncompyle6反编译器以及dis反汇编器： . #一个简单的Python应用 sample1.py print &#39;Hello World&#39; . 对其进行编译： . python -m py_compile sample1.py . 对编译后的sample1.pyc使用Python内置dis模块反汇编： . &gt;&gt;&gt; import marshal,dis &gt;&gt;&gt; fd = open(&#39;sample1.pyc&#39;, &#39;rb&#39;) &gt;&gt;&gt; fd.seek(8) &gt;&gt;&gt; sample1_code_obj = marshal.load(fd) &gt;&gt;&gt; fd.close() &gt;&gt;&gt; dis.dis(sample1_code_obj) 1 0 LOAD_CONST 0 (&#39;Hello World&#39;) 3 PRINT_ITEM 4 PRINT_NEWLINE 5 LOAD_CONST 1 (None) 8 RETURN_VALUE &gt;&gt;&gt; . 以上的汇编代码笔者肉眼反汇编的结果如下： . 0 LOAD_CONST 0 (&#39;Hello World&#39;) #加载co_consts[0]到栈顶，co_consts[0]存储着常量字符串&#39;Hello World&#39; 3 PRINT_ITEM #打印栈顶到sys.stdout，即print &#39;Hello World&#39; 4 PRINT_NEWLINE #打印新行到sys.stdout，此指令因print语句而由编译器自动生成 5 LOAD_CONST 1 (None) #加载co_consts[1]到栈顶，co_consts[1]存储着None 8 RETURN_VALUE #将栈顶返回给调用者，此两条指令为编译器自动生成 . 现在我们修改sample1.pyc，在程序入口增加一条绝对跳转指令（可以使用UltraEdit 16进制插入功能修改pyc文件，”JUMP_ABSOLUTE 3”在Python 2.7中对应的字节码为 0x71 0x03 0x00。修改code string内容的同时应修改code string的长度，此处增加了一个3字节指令)，使用内置dis模块反汇编的结果如下： . 1 0 JUMP_ABSOLUTE 3 #自行添加 &gt;&gt; 3 LOAD_CONST 0 (&#39;Hello World&#39;) 6 PRINT_ITEM 7 PRINT_NEWLINE 8 LOAD_CONST 1 (None) 11 RETURN_VALUE . 如果读者对汇编代码有一定认识，就会明白此处的绝对跳转对Python虚拟机执行此程序基本没有影响（除了增加一个指令执行周期），然而这个绝对跳转将成功欺骗反编译器。使用Uncompyle6反编译的结果如下： . &lt;&lt;&lt; Error: Decompiling stopped due to &lt;class &#39;uncompyle6.semantics.pysource.ParserError&#39;&gt; . 如果一个pyc文件无法被反编译，初级的破解者可能就会止步于此了，但对于有经验的工程师来说这还远远不够。同样的，我们还要让通常的反汇编器也无法工作才行。按下面的汇编代码继续加工上面的sample1.pyc。 . | 1 0 JUMP_ABSOLUTE [71 06 00] 6 | 3 LOAD_CONST [64 FF FF] 65535 (FAKE!) | &gt;&gt; 6 LOAD_CONST [64 00 00] 0 (Hello World) | 9 PRINT_ITEM [47 -- --] | 10 PRINT_NEWLINE [48 -- --] | 11 LOAD_CONST [64 01 00] 1 (None) | 14 RETURN_VALUE [53 -- --] . 以上第二条指令的意思是加载code object常量表的第65535项到栈顶。在上述sample1.pyc中，常量表的长度为2，下标65535已超出常量表的范围，所以这是条非法指令。但由于第一条绝对跳转的存在，第二条指令永远都不会被执行。通常的反汇编器如dis会尽全力列举有用的信息，但并不能理解实际执行的控制流，当反汇编器尝试反汇编第二条指令时，会试着去读取code object常量表的第65535项并且抛出一个’tuple index out of range’的意外。Python内置dis模块的出错信息如下： . &gt;&gt;&gt; fd = open(&#39;sample1.pyc&#39;, &#39;rb&#39;) &gt;&gt;&gt; fd.seek(8) &gt;&gt;&gt; import marshal,dis &gt;&gt;&gt; sample1_code_obj = marshal.load(fd) &gt;&gt;&gt; dis.dis(sample1_code_obj) 1 0 JUMP_ABSOLUTE 6 3 LOAD_CONST 65535 Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; File &quot;C: Python27 lib dis.py&quot;, line 43, in dis disassemble(x) File &quot;C: Python27 lib dis.py&quot;, line 96, in disassemble print &#39;(&#39; + repr(co.co_consts[oparg]) + &#39;)&#39;, IndexError: tuple index out of range &gt;&gt;&gt; . 现在Uncompyle6和dis都被欺骗了，代码得到了有效的保护。 .",
            "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/2021/03/03/log.html",
            "relUrl": "/2021/03/03/log.html",
            "date": " • Mar 3, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Examlecn",
            "content": "python hide_input=false #default_exp tutorial from nbdev.showdoc import show_doc . 最小的例子 . 从头开始创建nbdev项目的最小端到端示例。 . 第1步：设置您的nbdev GitHub存储库 . | 步骤2：修改配置文件 . 编辑settings.ini | . | 步骤3：编写代码（或复制/粘贴到笔记本中） . 标志 . | 魔术发生的地方：编写文档和测试 . | 编辑index.ipynb . | . | 步骤4：将笔记本转换为Python模块和文档 . 预览文档 . 注释说明： | . | show_doc . 关于show_doc的重要说明： | . | 刷新文档 . | . | 第5步：将文件推送到GitHub并查看托管文档 . | 步骤6：添加更多代码 . 测验 . 注释说明： | . | . | 步骤7：将Python模块发布到Pypi . | 参考 . 现场演示 | . | . 本节假设您已完成本 教程 。 以下是一个从头开始创建nbdev项目的最小示例，其中有一些注释说明了某些事情为何以这种方式工作。 . 对于此示例，我们将使用 Allen Downey出色著作《 Think Python 2》中的代码 ，尤其是 Card 模块。 我们将 nbdev 专注于为您提供足够的信息以提高生产力， 因此不会涵盖的所有功能 。 我们建议 您在完成本示例后 阅读其余 文档 。 . 第1步：设置您的nbdev GitHub存储库 . 根据 教程中 的说明 ，我们将使用 模板 创建一个新的存储库 。 在这种情况下，我们创建一个名为 deck_of_cards 的存储库 ： . 注意： 如果您打算编写可安装的Python模块，我们强烈建议您将repo命名为python模块。 . . 完成此操作后，您将获得一个包含必要文件的存储库以开始使用。 您还应该 按照 本教程中 的说明 安装nbdev 并 安装githooks 。 . 步骤2：修改配置文件 . 编辑settings.ini . 要使nbdev正常工作，需要 编辑settings.ini 。 这些设置用于填充必需的信息，以供您在 GitHub Pages 上 托管 文档 ，以及 将模块作为软件包发布到pypi 。 . 这些是我们在 settings.ini中 更改的字段 ： . lib_name = deck_of_cards . 描述 = “使用来自Allen Downey的Think Python 2nd Ed的代码编写的nbdev的最小示例” . 关键字 = nbdev . 作者 = Hamel Husain . author_email = hamel@example.com . 版权 = Hamel，inc。 . 用户 = fastai . 注意： 在此示例中，用户的值实际上并未更改，但是您必须将其更改为与GitHub上的GitHub存储库（通常是用户名）相对应的org。 . settings.ini文件中的值会自动为您传播到各种系统，这有助于最小化样板并学习复杂的配置文件。 例如， . 该 author 和 author_email 字段由读取 setup.py 的Python包装。 . | 在 lib_name 被两个由 setup.py 和 杰奇 的配置文件， _config.yaml 以确保呈现文档都在GitHub上的页面配置正确。 . | . 步骤3：编写代码（或复制/粘贴到笔记本中） . 接下来，我们 从ThinkPython2存储库中 获取 Card模块， 并将其写入nbdev中。 . 第一步是将 Card 类从 Card.py 复制并粘贴 到新的Jupyter笔记本中，我们将其命名为 00_card.ipynb 。 从python文件复制和粘贴代码是将现有python脚本转换为Jupyter笔记本的合理方法。 将大量代码复制到笔记本中的一个有用技巧是将整个文件复制到一个单元格中，然后 ctrl-shift-minus 将代码拆分为多个单独的单元格。 . 如果您尝试将现有的python项目转换为 nbdev ，我们建议您逐步将特定文件逐步转换为 nbdev 。 具体来说，我们建议选择一个python文件， card.py 如下所示。 . 注意： 文件名开头的数字不是必需的； 这是一种惯例，当笔记本按文件系统排序时，我们可以使笔记本保持所需的顺序。 . 在 笔记本 的第一个单元格中 ，写一个看起来像这样的注释（这不是必需的，但是我们在这里这样做是为了突出nbdev的重要功能）： . ＃default_exp卡 . 在这种情况下，该参数 card 指定 card.py 默认情况下 将从此笔记本导出的代码放置在目标位置 。 您可以 在此处 阅读有关如何从笔记本创建python模块的更多信息 。 安排笔记本的合理方法如下： . . 标志 . nbdev使用特殊的注释或标志作为一种标记语言，使您可以控制文档的各个方面以及如何将代码导出到模块以及如何测试代码。 除之外 default_exp ，此笔记本中还存在以下其他标志： . #hide . 注意： 此注释指示nbdev在生成文档时隐藏此单元格。 . #export . 注意： 此注释指示nbdev将此单元导出到适当的python文件。 如果未为提供参数 export ，则默认为上述指定的模块 default_exp 。 . 魔术发生的地方：编写文档和测试 . 在原始代码库中，Card的测试是分开的，位于 Card_test.py中 。 此外，的文档 Card 主要位于 Allen仓库 的 book文件夹中 ，而某些文档也位于文档字符串中。 尽管这是Python项目的典型安排，但我们认为 nbdev 可以通过将文档，测试和源代码组织到一个上下文中来简化您的工作流程。 我们认为，这使开发人员可以编写更高质量的文档和代码，并鼓励进行更多测试。 . 这是Card的文档+代码： . . 这些注释和测试由文档系统提供，将在后面的部分中进行讨论。 此外， 默认情况下 ，assert语句自动成为由 持续集成系统设置 在GitHub存储库 中的nbdev 中 运行的测试 。 . 注意： nbdev编程环境 为您 设置了 持续集成（CI） 系统。 您无需执行任何其他操作即可启用它，它会立即开始工作。 对于没有CI经验的人来说，这尤其好。 这是开始使用它的一种温和方法。 . 重要提示： fastcore的测试实用 程序提供了 一些测试实用程序 ，这些 实用程序提供了 对 常用断言语句类型的包装，还提供了更好的默认错误消息。 使用这些是可选的，但建议使用。 . 编辑index.ipynb . nbdev 存储库需要一个名为的笔记本 index.ipynb ，当您使用模板时，该 笔记本将 包含在您的存储库中。 index.ipynb 有两个目的： . 它成为您的仓库的自述文件（此笔记本转换为 README.md ） . | 它成为 index.html 文档的 主页（ ）。 . | 您会注意到以下样板 index.ipynb ： . 从 your_lib.core 导入 * . 您应该删除此行代码或将其注释掉，因为这将导致语法错误。 稍后，当您完成模块的创建时，可以将其替换为适当的import语句。 我们在此故意保留了此行，以便您可以体验持续集成系统（如上所述）如何警告您错误。 . 步骤4：将笔记本转换为Python模块和文档 . nbdev_build_lib 从仓库的根目录运行命令 。 这会将标 #export 有的 笔记本单元导出 到适当的python模块。 例如，笔记本 00_cards.ipynb 被转换到 card.py 。 . 运行命令nbdev_test_nbs 以运行代码并在所有笔记本中进行测试。 nbdev 还会通过 持续集成系统设置为您 运行此命令 ，但是在本地运行这些测试以获得即时反馈很有用。 . 注意： 有一种方法可以通过使用 此处描述的 特殊标签来选择性地跳过某些运行时间长或速度慢的测试 . 预览文档 . 要预览文档，请 make docs_serve 从存储库的根目录 运行命令 。 此命令 nbdev_build_docs 为您在后台 运行CLI命令 ，该 命令 从笔记本生成文档站点。 运行此命令后，您将在终端中看到一个URL，指示文档在本地托管的位置。 对于 本例中使用 的 fastai / deck_of_cards 存储库，URL为 http://127.0.0.1:4000/deck_of_cards/ . 如果您导航到的卡片页面 http://127.0.0.1:4000/deck_of_cards/card.html ，您将看到我们刚刚编写的文档，我们对其进行了注释，以供进一步说明： . . 注释说明： . 标题 卡 与 H1 笔记本中 的第一个 标题 相对应， 并带有注释块 API Details 作为摘要。 . | nbdev 自动为您呈现一个目录。 . | nbdev 自动将您的类或函数的签名呈现为标题。 . | nbdev 在GitHub上自动将链接添加到相应的源代码（这是纯文本python文件）。 请记住， nbdev 使用命令将Jupyter笔记本转换为源代码 nbdev_build_lib 。 . | 这部分文档是从文档字符串自动呈现的。 . | 笔记本的其余部分通过将markdown转换为HTML，显示每个单元格（包括图表和图像）的输入和输出等来呈现。 您可以使用 此页面上描述 的 标志 隐藏整个单元格，仅隐藏单元格输入或仅隐藏输出 。 . | nbdev支持特殊的块引号，这些引号在文档中显示为彩色框。 您可以 在此处 阅读有关它们的更多信息 。 在此特定示例中，我们使用 Note 块引用。 . | 在反引号中包含的单词将在适当的情况下自动超链接到关联的文档。 这是一个简单的情况，其中在 Card 上面紧接定义了类，但是这适用于页面和模块。 在后面的步骤中，我们将看到另一个示例。 . | show_doc . show_doc 允许您控制文档在文档中的显示方式。 您可以控制文档呈现方式的位置，顺序，标题和其他详细信息。 您可以 在此处了解 更多 信息 。 例如，这是您可以 show_doc 用来呈现 __eq__ 方法 的文档的 方式 Card （请注意，测试自然包含在文档下方）： . . 有关的重要说明 show_doc ： . 对于函数和类，show_doc默认情况下会 在定义函数或类的相同位置自动调用 。 这就是为什么 Cards 即使 show_doc 从未显式调用过 上面docs示例中 的类的标题的原因 。 . 您可以通过显式调用 show_doc 所需位置 来覆盖此默认设置 。 | . | 对于方法，您必须要求show_doc 显示文档标题，如 Card.__eq__ 上面 的 方法所示。 这是设计使然，因为与函数不同，您通常在单个连续的代码块中定义类的所有方法。 因此， show_doc 允许您控制方法的文档标题的顺序和位置，从而帮助您为在适当标题下组织的每种方法编写散文和测试。 . | 我们建议您 show_doc 通过编辑笔记本并重新渲染文档（如下所述）进行试验，以了解在不同情况下会发生什么。 . | . 刷新文档 . 如果要编辑文档，则可以对相应的笔记本进行更改并运行， nbdev_build_docs 然后 在浏览器中进行 硬刷新 以重新呈现文档。 . 第5步：将文件推送到GitHub并查看托管文档 . 此步骤假定您已 启用GitHub页面 。 . 至此，我们准备将您的第一个文件推送到GitHub。 如果您已 按照本教程中的说明安装了git hooks ， nbdev 它将自动从笔记本中清除不必要的元数据，以避免冲突和过于冗长的差异。 首次将文件推送到GitHub之前，我们建议运行命令， git status 以便您可以查看由生成的所有文件 nbdev 。 您将注意到已创建以下文件： . .py 与您创建的笔记本相对应的文件，位于与库名称相对应的文件夹中，在本例中，该文件夹称为 deck_of_cards 。 例如，将 __init__.py 在适当的目录中自动创建 一个 文件，以组织一个python模块。 . | 文件 docs/ 夹中的 文档站点 文件。 该目录包含HTML，CSS和其他文件，这些文件用于在GitHub Pages上托管您的文档站点。 . | . git add 在推送到GitHub之前， 请确保将所有这些文件添加到提交中 ，因为 所有这些文件 都可以正常工作。 . 将文件推送到GitHub将 使用GitHub Actions 自动触发 持续集成（CI） 。 CI将自动执行 此处概述 的许多检查 。 您可以通过导航到GitHub存储库中的“操作”选项卡来查看GitHub动作中正在运行的CI流程。 . 推送文件后，GitHub将自动重建您的文档。 您可以通过转至存储库设置并在选项下找到GitHub Pages部分来查看文档构建状态。 当GitHub正在构建您的页面时，它将如下所示： . . 页面构建完成后，颜色和状态消息将变为如下所示： . . 此外，假设您已经 启用了GitHub Pages ，则可以随时查看Github Pages部署的状态。 如果添加 /deployments 到存储库的GitHub URL，您将看到一个部署仪表板。 例如，以下是 在推送新文件后 的 https://github.com/fastai/deck_of_cards/deployments 的屏幕截图 ： . . 步骤6：添加更多代码 . 恭喜，您使用nbdev编写了第一段代码！ 但是，要完全掌握nbdev的工作方式，值得在新笔记本中添加其他代码，以导入您之前编写的代码。 接下来，我们将 Deck类形式的cards.py 添加 到名为 01_deck.ipynb 的新笔记本中 。 该笔记本将导入先前创建的 Card 类，并创建一个 Deck ，它是Card的集合： . . 与先前的笔记本类似，第一个单元格具有nbdev标志 # default_exp deck ，这意味着标记为的代码块 #export 将 deck.py 默认 导出到文件中 。 您可以看到我们导入了 Card 对象，并 deck.py 使用以下代码单元 将该代码导出到 ： . #export . from deck_of_cards.card 导入 卡 . 之所以 能够成功 ，是 因为cli命令已 nbdev_build_lib 转换 00_card.ipynb 为 card.py ，我们已经在此处 将 其导入。 . 测验 . 唐尼的代码 Deck 在名为 Card_test.py 的单独文件中 包含对该 类 的测试 。 该文件是一个很好的例子，突出了的优势 nbdev 。 该文件的内容如下： . “”该文件包含与 . Allen B. Downey . 一起使用的“ Think Stats”代码，可从greenteapress.com获得。版权所有2014 Allen B. Downey . 许可：GNU GPLv3 http://www.gnu.org/licenses/gpl。 html . “”“ . 来自 __future__ import print_function ， 部门 . 从Card导入卡，Deck导入unittest . 类 测试（单元测试，测试用例）： . DEF testDeckRemove （自）： 甲板 = 甲板（） card23 = 卡（2 ， 3 ） 的甲板。remove _card （card23 ） . 如果 __name__ == “ __main__ ” ： . unittest 。主要（） . 由于以下原因，上面显示的代码有问题： . 目前尚不清楚测试的目的是什么。 . | 该测试位于与实现分开的文件中，因此您必须打开多个窗口和/或切换上下文以了解该测试。 . | 测试使用一个api， unittest 您必须学习并考虑一下是否要编写测试。 . | 测试与文档以及与解释类的内容相关的任何散文是分开的 Deck 。 . | . 所有这些问题都在nbdev中处理，因为您可以在同一上下文中编写代码，文档和测试。 以下是 01_deck.ipynb 的相关部分的屏幕快照，该屏幕快照 以更具可读性和表现力的方式表示代码和此测试： . . 上面的代码表示相同的单元测试，但也将文档与Deck的原始实现集成在一起。 您可以在GitHub上查看笔记本电脑 在这里 。 此笔记本中显示的另一个附加工具是 nbdev function show_doc ，它使您可以控制文档的放置。 在此示例中， showdoc(Deck.remove_card) 将在文档中创建一个带有适当标题的部分。 . 如果运行CLI命令 make docs_serve ，则可以在本地预览这些文档的外观。 以下是带注释的屏幕快照： . . 注释说明： . 在编写这些文档时，我们只 Card 用反引号 括起来 。 nbdev 自动将其转换为指向文档相应页面的超链接 Card 。 . | 该方法的标题 Deck.remove_card 是由创建的 show_doc 。 . | nbdev 旨在鼓励您将测试作为文档的一部分编写，如下所示。 . | 您可以在 https://fastai.github.io/deck_of_cards/deck.html 上实时查看此页面 。 . 完成后，请确保在推送到GitHub之前运行以下cli命令。 . nbdev_build_lib ：这会将您的笔记本转换为模块。 . | nbdev_build_docs ：这将生成您的文档站点。 . | nbdev_test_nbs ：这将运行您的所有测试（这是一个好主意，因此您可以捕获错误）。 . | git status 查看哪些文件已更改，这是一个很好的练习，它是首次入门时 nbdev 了解自动生成的文件的方法。 . | . 步骤7：将Python模块发布到Pypi . 您可以按照 以下说明 将模块发布到pypi 。 . 参考 . 该示例的所有代码都可以在GitHub repo fastai / deck_of_cards上找到 。 . 现场演示 . 以下视频显示了此示例的现场演示，最后是“问答”部分。 .",
            "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/2021/02/17/examleCN.html",
            "relUrl": "/2021/02/17/examleCN.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Deck",
            "content": "",
            "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/2021/02/17/deck.html",
            "relUrl": "/2021/02/17/deck.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Card",
            "content": "",
            "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/2021/02/17/card.html",
            "relUrl": "/2021/02/17/card.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Markdown文档书写简单示例",
            "content": "markdown文档书写的简单示例 . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "本博客展示本人的Python学习笔记。 如果对文章还有疑问或者见解，建议点击—&gt;“这里”关注我，里面有我的最新动态。 [^1]:This website is powered by fastpages . [^2].a blogging platform that natively supports Jupyter notebooks in addition to other formats. .",
          "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Thanks for your reading, this is my study notes for Python, if you find something wrong in my essay, please leave a comment and I will see. . Posts .",
          "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jumbojing.github.io/jupyter_notebook_blogs//jupyter_notebook_blogs/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}